#!/bin/sh

# From: https://gist.github.com/gtramontina/34fd3223ff754f13df56
git_clone_or_pull() {
  local REPOSRC=$1
  local LOCALREPO=$2
  local LOCALREPO_VC_DIR=$LOCALREPO/.git
  if [ ! -d $LOCALREPO_VC_DIR ]; then
    git clone --recursive $REPOSRC $LOCALREPO
  else
    pushd $LOCALREPO
    git pull $REPOSRC && git submodule update --init --recursive
    popd
  fi
}

brew_remove() {
  if brew_is_installed "$1"; then
    fancy_echo "Removing %s ..." "$1"
    brew uninstall "$@"
  else
    fancy_echo "Formula %s not found" "$1"
  fi
}

apps=(
  adobe-creative-cloud
  alfred
  appcleaner
  # atom
  bartender
  carbon-copy-cloner
  clean-me
  coconutbattery
  daisydisk
  day-o
  dropbox
  # evernote
  firefox
  # github
  google-backup-and-sync
  google-chrome
  hazel
  # iterm2
  imageoptim
  # logitech-control-center
  # mamp
  sip
  # sketch
  # sketch-toolbox
  skype
  # skyfonts
  slack
  # sonos
  # spectacle
  spotify
  # sublime-text
  # teamviewer
  the-unarchiver
  transmit
  virtualbox
  visual-studio-code
  vlc
  whatsapp
)

fancy_echo "Installing apps"
for pkg in "${apps[@]}"
do
  brew cask install $pkg
done

fancy_echo "Installing homebrew packages"
brew bundle --file=- <<EOF

brew "htop"
brew "ssh-copy-id"
brew "v8"
brew "wget"

EOF

fancy_echo "installing MAS apps"
mas install 1333542190 	# 1Password
# mas install 904280696 	# Things 3
mas install 1278508951 	# Trello
mas isntall 955848755 	# Theine
mas install 441258766   # magnet
mas install 775737590   #ia writer

# NVM
if [ ! -d "$HOME/.nvm" ]; then
  fancy_echo "Installing NVM"
  git_clone_or_pull 'https://github.com/creationix/nvm.git' "$HOME/.nvm"
  cd "$HOME/.nvm" && git checkout `git describe --abbrev=0 --tags`
  . "$HOME/.nvm/nvm.sh"
fi


# Prezto
fancy_echo "Installing Prezto"
git_clone_or_pull 'https://github.com/sorin-ionescu/prezto.git' "${ZDOTDIR:-$HOME}/.zprezto"

# Cleanup
fancy_echo "Cleaning up old Homebrew formulae ..."
brew cleanup


## Symlinks
# Sublime Text 3
# ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl
# ln -s "$HOME/Dropbox/AppSync/ST3/User" "$HOME/Library/Application Support/Sublime Text 3/Packages/User"

# Dotfiles
if [ -r "$HOME/.rcrc" ]; then
  fancy_echo "Updating dotfiles ..."
  rcup
fi

## OSX System Settings

# Enable full keyboard access for all controls (e.g. enable Tab in modal dialogs) (default: not set).
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

# Automatically hide and show the Dock (default: false).
defaults write com.apple.dock autohide -bool true

# Disable press-and-hold for keys in favor of key repeat (default: true).
defaults write -g ApplePressAndHoldEnabled -bool false

# Set a blazingly fast keyboard repeat rate (default: 60).
defaults write NSGlobalDomain KeyRepeat -int 1

# Show all filename extensions in Finder (default: false).
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Expand save panel (default: false).
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

# Disable auto-correct (default: true).
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Avoid creating .DS_Store files on network volumes (default: false).
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

# Require password 5 seconds after sleep or screen saver begins.
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 5

# Enable Safariâ€™s debug menu (default: false).
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

# Show the ~/Library folder (default: hidden).
chflags nohidden ~/Library

# Disable shadow in screenshots (default: false).
# defaults write com.apple.screencapture disable-shadow -bool true

# Expand print panel (default: false).
# defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true

# Show remaining battery time, hide percentage.
# defaults write com.apple.menuextra.battery ShowPercent -string "NO"
# defaults write com.apple.menuextra.battery ShowTime -string "YES"

# Always show scrollbars (default: WhenScrolling).
# defaults write NSGlobalDomain AppleShowScrollBars -string "Always"
